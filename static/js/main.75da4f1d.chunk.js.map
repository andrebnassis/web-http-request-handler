{"version":3,"sources":["component/HttpRequestForm.tsx","service/UrlHandler.ts","service/stringUtils.ts","service/HttpRequestHandler.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HeaderElementType","getRelativePath","url","pathname","search","hash","HttpRequestForm","handleHttpResponse","useState","httpRequestVerb","setHttpRequestVerb","httpRequestUrl","setHttpRequestUrl","httpRequestBody","setHttpRequestBody","httpRequestHeader","setHttpRequestHeader","getHeaderObj","data","headerObj","forEach","e","str","key","undefined","toString","trim","length","value","removeHeaderElementById","event","id","target","parentNode","getAttribute","newHttpRequestHeader","filter","setHeaderElementById","elementType","httpRequestHeaderArr","map","onSubmit","preventDefault","URL","relativePath","requestConfig","client","axios","create","then","res","catch","error","handleRequest","baseURL","relativePathStartIndex","href","lastIndexOf","substring","getBasePath","method","headers","onChange","data-id","type","onClick","uuidv4","App","httpResponse","setHttpResponse","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75da4f1d.chunk.js","sourcesContent":["import { AxiosRequestConfig, Method } from \"axios\";\nimport React, { useState } from \"react\";\nimport { handleRequest } from \"../service/HttpRequestHandler\";\nimport { getBasePath, getRelativePath } from \"../service/UrlHandler\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { isBlank } from \"../service/stringUtils\";\n\nenum HeaderElementType {\n  key = \"key\",\n  value = \"value\"\n}\n\nexport const HttpRequestForm:React.FC<{handleHttpResponse:(data:any) => void}> = ({handleHttpResponse}) => {\n\n    const [httpRequestVerb, setHttpRequestVerb] = useState<string>(\"GET\");\n    const [httpRequestUrl, setHttpRequestUrl] = useState<string>(\"http://localhost:9000\");\n    const [httpRequestBody, setHttpRequestBody] = useState<string>(\"\");\n    const [httpRequestHeader, setHttpRequestHeader] = useState<Array<{id:string, key:string, value:string }>>([]);\n\n\n    const getHeaderObj = (data:Array<{id:string, key:string, value:string }>) => {\n      const headerObj:any = {};\n      data.forEach(e => {\n        if (!isBlank(e.key)){\n        headerObj[e.key] = e.value;\n      }\n      })\n\n      return headerObj;\n    }\n    const removeHeaderElementById = (event:any) => {\n\n      const id = ((event.target.parentNode) as Element).getAttribute(\"data-id\");\n      const newHttpRequestHeader = httpRequestHeader.filter(e => e.id !== id);\n      setHttpRequestHeader(newHttpRequestHeader);\n    }\n    const addHeaderElement = () => {\n\n    const newHttpRequestHeader = [{id:uuidv4(), key:\"\", value:\"\" }, ...httpRequestHeader];\n    setHttpRequestHeader(newHttpRequestHeader);\n    }\n\n    const setHeaderElementById = (event:any, elementType:HeaderElementType) => {\n      const id = ((event.target.parentNode) as Element).getAttribute(\"data-id\");\n      const httpRequestHeaderArr = httpRequestHeader.map(e => {\n        if(e.id === id){\n          switch(elementType){\n            case HeaderElementType.key:\n              e.key = event.target.value;\n              break;\n            case HeaderElementType.value:\n              e.value = event.target.value;\n              break;\n            default:\n              break;\n          }\n        }\n      return e;\n      });\n      \n      setHttpRequestHeader(httpRequestHeaderArr);\n\n    }\n\n    const handleOnSubmit = (event:any):void => {\n    \n      event.preventDefault();\n\n      try{\n\n      const url = new URL(httpRequestUrl);\n      const relativePath = getRelativePath(url);\n      const basePath = getBasePath(url);\n      \n      const config:AxiosRequestConfig = {\n        baseURL:basePath,\n        url:relativePath,\n        method:httpRequestVerb as Method,\n        headers:getHeaderObj(httpRequestHeader),\n        data: httpRequestBody\n      };\n     \n      const response =  handleRequest(config);\n      response.then(data => {handleHttpResponse(data)})\n      .catch(error => handleHttpResponse(error));\n  }\n  catch(e){\n    handleHttpResponse(undefined);\n  }\n    \n    };\n  \n    return (\n      <div>\n       <form onSubmit={handleOnSubmit}>\n       <label>HttpRequest:\n       </label>\n       <br/>\n         <select onChange={e => setHttpRequestVerb(e.target.value)} value={httpRequestVerb}>\n        <option value=\"GET\">GET</option>\n        <option value=\"POST\">POST</option>\n        <option value=\"PUT\">PUT</option>\n        <option value=\"PATCH\">PATCH</option>\n        <option value=\"DELETE\">DELETE</option>\n      </select>\n      <input value={httpRequestUrl} onChange={e => setHttpRequestUrl(e.target.value)}>\n      </input>\n      <br/>\n      <label>Header:</label>\n      {\n        httpRequestHeader.map(e => {\n          return (\n            <div data-id={e.id}>\n            <input value={e.key} onChange={e => {setHeaderElementById(e, HeaderElementType.key)} }/>\n            <input value={e.value} onChange={e => {setHeaderElementById(e, HeaderElementType.value)}} />\n            <button type=\"button\" onClick={removeHeaderElementById}>-</button>\n            </div>\n          );\n        })\n      }\n      <button type=\"button\" onClick={addHeaderElement}>+</button>\n      <br/>\n      <label>\n        Body:\n      </label>\n      <br/>\n      <textarea value={httpRequestBody} onChange={e => setHttpRequestBody(e.target.value)}>\n      </textarea>\n      <input type=\"submit\" value=\"send\"/>\n      </form>\n      <br/>\n      </div>\n    );\n  }","export const getRelativePath = (url:URL):string =>{\n    return `${url.pathname}${url.search}${url.hash}`;\n}\n\nexport const getBasePath = (url:URL):string => {\n    const relativePath = getRelativePath(url);\n    const relativePathStartIndex = url.href.lastIndexOf(relativePath);\n    return url.href.substring(0,relativePathStartIndex);\n}","export const isBlank = (str:string|null|undefined):boolean => {\n\n    if(str === null || str === undefined){\n        return true;\n    }\n\n    if(str.toString().trim().length === 0){\n        return true;\n    }\n\n    return false;\n}\n","import axios, { AxiosInstance, AxiosRequestConfig } from \"axios\";\n\nexport const handleRequest = (requestConfig:AxiosRequestConfig, client?:AxiosInstance):Promise<any> =>{\n\n    client = client ?? axios.create();\n  \n    return client(requestConfig).then(res => {\n      return res.data;\n    })\n    .catch(error => {throw error});\n  }","import React, { useState } from 'react';\nimport { HttpRequestForm } from './component/HttpRequestForm';\n\nconst App:React.FC = () => {\n\n  const [httpResponse, setHttpResponse] = useState<any>(undefined);\n\n  return (\n    <div>\n      <h1>Basic HTTP Request Handler</h1>\n      Repository link: <a href=\"https://github.com/andrebnassis/web-http-request-handler\">https://github.com/andrebnassis/web-http-request-handler</a>\n    <br/>\n    <br/>\n    <HttpRequestForm handleHttpResponse={setHttpResponse}/>\n     <div>\n     HttpResponse: {JSON.stringify(httpResponse)}\n     </div>\n    </div>\n    \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}